spring:
    application:
        name: libraryapi
    profiles:
      active: production # Define o perfil apontado para produção. Pode ser "homologacao", "production"...
    # SPRING_PROFILES_ACTIVE=production (Variável de ambiente para definir o perfil ativo).
    output:
      ansi:
        enabled: ALWAYS
    datasource: 
        url: jdbc:postgresql://localhost:5435/library
        username: postgres
        password: postgres
        driver-class-name: org.postgresql.Driver
    jpa:
        show-sql: true
        hibernate:
           # ddl-auto: update = Mas não é recomendado para usar em produção.
            ddl-auto: none
        properties:
            hibernate:
                format_sql: true  # Altera o formato do SQL para ser mais legível no console.
    security:
        oauth2:
            client:
                registration:
                    google:
                        client-id: ${GOOGLE_CLIENT_ID}
                        client-secret: ${GOOGLE_CLIENT_SECRET} // git reset --soft HEAD~1


# Configurações Básicas sobre logs:
logging:
  pattern:
    console: '%clr(%d{dd-MM-yyyy HH:mm:ss}){faint} %clr(%5p) %clr([%t]){faint} %clr(%-40.40logger){cyan} %clr(:){yellow} %m%n'
  # file:
  #   name: app.log
  level:
    root: warn
    io:
      github:
        n4th05: info
    org:
        springframework:
          web: debug
          security: trace

# trace - ele pega tudo, é o nível mais detalhado de Logs. Ou seja ele pega o trace, debug, info, warn e error. (Não muito recomendado, porque gera muitos logs e sobrecarrega a aplicação sem necessidade).
# debug - ele pega o debug, info, warn e error.
# info - ele pega o info, warn e error.
# warn - ele pega o warn e error. (Recomendado para ambientes de produção).
# error - ele pega apenas o error.


# Configurações do Spring Boot Actuator:
management:
  server:
    port: 9090 # Define uma porta diferente para o Actuator, assim não conflita com a porta da aplicação principal.
  endpoints:
    web:
      exposure:
        include: '*' # Expõe todos os endpoints do Actuator.


springdoc:
 override-with-generic-response: false # Desabilita a resposta genérica padrão do Springdoc OpenAPI, exemplo: bad request 400, internal server error 500, not found 404, etc.


# Production
---
spring:
  config:
    activate:
      on-profile: production
  jpa:
    show-sql: false


# Homologação
---
spring:
  config:
    activate:
      on-profile: homologacao
  jpa:
    show-sql: false
  datasource: 
      url: jdbc:postgresql://localhost:5435/library